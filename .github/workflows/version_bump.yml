name: Version Bump

on:
  pull_request:
    types: [closed]
    branches: [ master ]

jobs:
  bump_version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools

    - name: Set Git user
      run: |
        git config --local user.email "matt@teleos.ltd"
        git config --local user.name "Matthew DesEnfants"
      
    - name: Calculate version bump
      id: bump
      run: |
        # Initialize bump type based on PR labels
        BUMP_TYPE="none"
        
        # PR labels - check if we have major, minor, or patch labels
        if [[ ${{ contains(github.event.pull_request.labels.*.name, 'bump:major') }} == true ]]; then
          BUMP_TYPE="major"
        elif [[ ${{ contains(github.event.pull_request.labels.*.name, 'bump:minor') }} == true ]]; then
          BUMP_TYPE="minor"
        elif [[ ${{ contains(github.event.pull_request.labels.*.name, 'bump:patch') }} == true ]]; then
          BUMP_TYPE="patch"
        fi
        
        echo "Bump type from labels: $BUMP_TYPE"
        
        # Get current version from setup.py
        CURRENT_VERSION=$(python -c "import re; print(re.search(r'version=\"([^\"]+)\"', open('setup.py').read()).group(1))")
        echo "Current version: $CURRENT_VERSION"
        
        # Split the version into components
        IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        
        # Bump version based on type
        if [[ "$BUMP_TYPE" == "major" ]]; then
          NEW_MAJOR=$((MAJOR + 1))
          NEW_VERSION="$NEW_MAJOR.0.0"
        elif [[ "$BUMP_TYPE" == "minor" ]]; then
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.0"
        elif [[ "$BUMP_TYPE" == "patch" ]]; then
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        else
          NEW_VERSION="$CURRENT_VERSION"
        fi
        
        echo "New version: $NEW_VERSION"
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Update version in setup.py
      if: steps.bump.outputs.bump_type != 'none'
      run: |
        CURRENT_VERSION="${{ steps.bump.outputs.current_version }}"
        NEW_VERSION="${{ steps.bump.outputs.new_version }}"
        sed -i "s/version=\"$CURRENT_VERSION\"/version=\"$NEW_VERSION\"/" setup.py
        
    - name: Update version in __init__.py
      if: steps.bump.outputs.bump_type != 'none'
      run: |
        CURRENT_VERSION="${{ steps.bump.outputs.current_version }}"
        NEW_VERSION="${{ steps.bump.outputs.new_version }}"
        sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" ranch/__init__.py
        
    - name: Commit version bump
      if: steps.bump.outputs.bump_type != 'none'
      run: |
        git add setup.py ranch/__init__.py
        git commit -m "Bump version to ${{ steps.bump.outputs.new_version }} [skip ci]" -m "Automatic version bump triggered by PR #${{ github.event.pull_request.number }} with label 'bump:${{ steps.bump.outputs.bump_type }}'"
        git push