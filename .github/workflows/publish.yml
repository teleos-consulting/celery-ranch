name: Publish to PyPI

on:
  push:
    branches: [ master ]
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine build packaging
    
    - name: Check version bump
      if: github.event_name == 'push'
      id: check_version
      run: |
        # Get the current version from setup.py
        CURRENT_VERSION=$(python -c "from setuptools import setup; setup()" --version 2>/dev/null)
        echo "Current version: $CURRENT_VERSION"
        
        # Get the latest published version from PyPI
        LATEST_VERSION=$(python -c "import json, urllib.request; print(json.loads(urllib.request.urlopen('https://pypi.org/pypi/ranch/json').read())['info']['version'])")
        echo "Latest published version: $LATEST_VERSION"
        
        # Compare versions using packaging
        python -c "from packaging import version; current=version.parse('$CURRENT_VERSION'); latest=version.parse('$LATEST_VERSION'); exit(0 if current > latest else 1)" && SHOULD_PUBLISH=true || SHOULD_PUBLISH=false
        echo "Should publish: $SHOULD_PUBLISH"
        
        echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
    
    - name: Build and package
      run: |
        python -m build
    
    - name: Publish to PyPI for releases
      if: github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
    
    - name: Publish to PyPI for version bumps
      if: github.event_name == 'push' && steps.check_version.outputs.should_publish == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true