name: Build and Publish Python Package

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (must match version in code)'
        required: true
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Verify versions match
        run: |
          PYPROJECT_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
          RANCH_VERSION=$(grep -Po '(?<=__version__ = ")[^"]*' ranch/__init__.py)
          CELERY_RANCH_VERSION=$(grep -Po '(?<=__version__ = ")[^"]*' celery_ranch/__init__.py)
          
          echo "Versions found:"
          echo "pyproject.toml: $PYPROJECT_VERSION"
          echo "ranch/__init__.py: $RANCH_VERSION"
          echo "celery_ranch/__init__.py: $CELERY_RANCH_VERSION"
          
          if [ "$PYPROJECT_VERSION" != "$RANCH_VERSION" ] || [ "$PYPROJECT_VERSION" != "$CELERY_RANCH_VERSION" ]; then
            echo "Version mismatch! Versions in pyproject.toml, ranch/__init__.py, and celery_ranch/__init__.py must match."
            exit 1
          fi
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "$PYPROJECT_VERSION" != "${{ github.event.inputs.version }}" ]; then
              echo "Version mismatch! Input version ${{ github.event.inputs.version }} does not match code version $PYPROJECT_VERSION"
              exit 1
            fi
          fi
          
          echo "All versions match: $PYPROJECT_VERSION"
      
      - name: Run tests
        run: |
          pytest
      
      - name: Run linters
        run: |
          flake8 ranch
          flake8 celery_ranch
          mypy .
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # Required for OpenID Connect authentication
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No credentials needed - uses OIDC